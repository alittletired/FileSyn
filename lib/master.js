// Generated by CoffeeScript 1.6.2
var appConfig, io, master,
  __hasProp = {}.hasOwnProperty;

io = require('socket.io');

appConfig = require('../appConfig');

master = false;

exports.getConnSlaves = function() {
  var slave, slaveid, _ref, _results;

  _ref = master.sockets.sockets;
  _results = [];
  for (slaveid in _ref) {
    if (!__hasProp.call(_ref, slaveid)) continue;
    slave = _ref[slaveid];
    _results.push({
      'server': slave.endpoint,
      watch: slave.watchList
    });
  }
  return _results;
};

exports.listen = function(server) {
  console.log(" 作为" + appConfig.runAs + "运行");
  exports.master = master = io.listen(server, {
    'log level': 0
  });
  return master.sockets.on('connection', function(socket) {
    var address;

    address = socket.handshake.address;
    socket.endpoint = address.address + ":" + address.port;
    socket.watchList = [];
    console.log(socket.endpoint + " 成功连接");
    socket.on('syncAll', function(project) {
      var slave, slaveid, synedcount, totalSalves, _ref, _results;

      synedcount = 0;
      totalSalves = {};
      _ref = master.sockets.sockets;
      _results = [];
      for (slaveid in _ref) {
        if (!__hasProp.call(_ref, slaveid)) continue;
        slave = _ref[slaveid];
        if (!(slave.isSlave && !slave.disconnected && slaveid !== socket.id)) {
          continue;
        }
        totalSalves[slaveid] = slave;
        _results.push((function(slave) {
          return slave.emit('sync', project, function(data) {
            var c, key, val;

            if (!totalSalves[slave.id]) {
              return;
            }
            if (data.event !== 'notExist') {
              data.result = slave.endpoint + ' ' + data.result;
              socket.emit('syncedResult', data);
            }
            console.log(data.result);
            if (data.event !== 'syncing') {
              delete totalSalves[slave.id];
            }
            c = (function() {
              var _results1;

              _results1 = [];
              for (key in totalSalves) {
                if (!__hasProp.call(totalSalves, key)) continue;
                val = totalSalves[key];
                _results1.push(val.endpoint);
              }
              return _results1;
            })();
            if (c.length > 0) {
              console.log("还存在" + c.join(' '));
              return;
            }
            return socket.emit('syncedResult', {
              result: '所有服务器同步完成',
              project: project,
              event: 'syncEnd'
            });
          });
        })(slave));
      }
      return _results;
    });
    socket.on('master', function(watchs) {
      socket.isSlave = true;
      if (watchs) {
        return socket.watchList = watchs;
      }
    });
    socket.on('execCommand', function(data) {
      var endpoint, slave, slaveid, _ref, _results;

      if (data.validcode !== 'D910F6E3665320D6A5CA6C15399BA902') {
        return socket.send('没有权限');
      }
      if (!data.cmd) {
        return socket.send('消息为空');
      }
      if (data.endpoints === null || data.endpoints.length === 0) {
        return socket.send('没有选择服务器');
      }
      _ref = master.sockets.sockets;
      _results = [];
      for (slaveid in _ref) {
        if (!__hasProp.call(_ref, slaveid)) continue;
        slave = _ref[slaveid];
        _results.push((function() {
          var _i, _len, _ref1, _results1;

          _ref1 = data.endpoints;
          _results1 = [];
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            endpoint = _ref1[_i];
            if (slave.endpoint === endpoint) {
              slave.emit('execCommand', data.cmd, function(msg) {
                console.log(slave.endpoint + msg);
                return socket.send(slave.endpoint + msg);
              });
              break;
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        })());
      }
      return _results;
    });
    socket.on("disconnect", function() {
      return console.log(socket.endpoint + "已经断开连接");
    });
    return socket.on('message', function(data) {
      return console.log(data);
    });
  });
};
