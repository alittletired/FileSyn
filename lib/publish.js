// Generated by CoffeeScript 1.6.2
var appConfig, args, client, exec, fs, path, print, publish, readline, request, rl, spawn, _ref;

fs = require('fs');

request = require('request');

print = require('sys').print;

readline = require('readline');

_ref = require('child_process'), spawn = _ref.spawn, exec = _ref.exec;

appConfig = require('./../appConfig');

path = require("path");

client = require('socket.io-client');

publish = function(project) {
  var gitscript, projectpath;

  if (!project) {
    return print("项目名称不能为空");
  }
  project = project.toLowerCase();
  if (appConfig.repo[project]) {
    projectpath = appConfig.repo[project];
  } else {
    projectpath = appConfig.projectRoot + project;
  }
  if (!fs.existsSync(projectpath)) {
    return print("项目名称不对");
  }
  print("\n文件上传中，请等待...\n");
  gitscript = spawn(path.join(__dirname, "../cmd/push.cmd"), [project, projectpath, appConfig.remoteGit]);
  gitscript.stdout.on('data', function(data) {
    return print(data.toString());
  });
  gitscript.stderr.on('data', function(data) {
    return print(data.toString());
  });
  return gitscript.on('close', function(code) {
    var localSlave;

    if (code !== 0) {
      return print('发布失败，请检查原因\n ');
    }
    print("文件上传完毕，发送同步指令...\n");
    localSlave = client.connect(appConfig.masterHost + ":" + appConfig.port);
    localSlave.on('connect', function() {
      localSlave.on('message', function(message) {
        return print(message);
      });
      localSlave.on('syncEnd', function(message) {
        print(message);
        return process.exit();
      });
      return localSlave.emit("syncAll", project);
    });
    return localSlave.on('error', function(data) {
      console.log("无法连接服务器");
      return process.exit();
    });
  });
};

args = process.argv.splice(2);

print(args);

if (args[0]) {
  return publish(args[0]);
} else {
  rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });
  rl.question("请输入项目名称：        ", function(p) {
    rl.close();
    return publish(p);
  });
  exports.publish = publish;
}
