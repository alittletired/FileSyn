// Generated by CoffeeScript 1.6.2
var appConfig, client, exec, fs, helper, isConnect, mail, onWatchDirChange, path, project, projectInfo, reconnct, slave, sync, syncErrors, wait, watchDir, watcherDict, _i, _len, _ref;

sync = require('../lib/sync');

helper = require('./helper');

path = require('path');

exec = require('child_process').exec;

client = require('socket.io-client');

fs = require('fs');

appConfig = require('../appConfig');

mail = require('../lib/mail');

wait = function(milliseconds, func) {
  return setTimeout(func, milliseconds);
};

syncErrors = {};

if (!appConfig.masterHost) {
  return;
}

isConnect = false;

slave = client.connect(appConfig.masterHost + ":" + appConfig.port);

console.log("正在连接" + appConfig.masterHost + ":" + appConfig.port);

slave.on('connect', function() {
  console.log("已与服务器建立连接:" + appConfig.masterHost + ":" + appConfig.port);
  isConnect = true;
  global.slave = slave;
  slave.emit('master', appConfig.watch || []);
  slave.on('sync', function(project, fn) {
    console.log("接收到同步指令" + project);
    return sync(project, function(data) {
      return fn(data);
    });
  });
  slave.on('message', function(msg) {
    return console.log(msg);
  });
  slave.on('syncEnd', function(msg) {
    return console.log(msg);
  });
  slave.on('syncedResult', function(msg) {
    var project, _i, _len, _ref, _results;

    if (msg.event === 'syncing') {
      console.log('开始同步 ' + msg.result);
    }
    if (msg.event === 'synced') {
      console.log('同步成功 ' + msg.result);
    }
    if (msg.event === 'syncedError') {
      console.log('同步失败 ' + msg.result);
    }
    if (msg.event === 'syncedError') {
      syncErrors[msg.project].push(msg.result);
    }
    if (msg.event === 'syncEnd') {
      console.log(msg.result);
      return syncErrors[msg.project].length === 0;
      _ref = appConfig.watch;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        project = _ref[_i];
        if (project === msg.project) {
          _results.push(mail.sendMail({
            html: syncErrors[msg.project].join('<br />')
          }));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    }
  });
  slave.on('execCommand', function(cmd, fn) {
    return exec(cmd, function(error, stdout, stderr) {
      if (error) {
        fn('执行失败 ' + error);
      }
      if (!error) {
        return fn('执行成功 ' + stdout);
      }
    });
  });
  return slave.on('disconnect', function() {
    isConnect = false;
    return reconnct();
  });
});

slave.on('error', function(data) {
  console.log("无法连接服务器" + appConfig.masterHost + ":" + appConfig.port);
  return reconnct();
});

reconnct = function() {
  if (isConnect) {
    return;
  }
  slave.socket.reconnect();
  return setTimeout(reconnct, 30000);
};

watchDir = function(projectInfo, realpath) {
  var watcher;

  realpath = realpath || (projectInfo.root + projectInfo.dir);
  watcher = fs.watch(realpath, function(event, filename) {
    if (filename === ".git") {
      return;
    }
    console.log("监视到 " + filename + " 变动,事件 " + event + "，" + appConfig.watchInterval + " 分钟后将同步...");
    return onWatchDirChange(projectInfo);
  });
  watcherDict[projectInfo.dir].push(watcher);
  return fs.readdir(realpath, function(err, files) {
    var file, rawfile, _i, _len, _results;

    if (err) {
      return;
    }
    _results = [];
    for (_i = 0, _len = files.length; _i < _len; _i++) {
      rawfile = files[_i];
      if (rawfile === '.git') {
        continue;
      }
      file = path.join(realpath, rawfile);
      _results.push(fs.stat(file, function(err, stat) {
        if (!err && stat && stat.isDirectory()) {
          return watchDir(projectInfo, file);
        }
      }));
    }
    return _results;
  });
};

watcherDict = {};

onWatchDirChange = function(projectInfo) {
  var watcher, _i, _len, _ref;

  _ref = watcherDict[projectInfo.dir];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    watcher = _ref[_i];
    watcher.close();
  }
  watcherDict[projectInfo.dir] = [];
  return wait(1000 * 60 * appConfig.watchInterval, function() {
    var cmd;

    console.log("\n监视服务器,文件上传中，请等待...\n");
    cmd = helper.exec('push', projectInfo.project);
    return cmd.on('close', function(code) {
      if (code !== 0) {
        return console.log('自动同步失败，请检查原因\n ');
      }
      console.log("文件自动上传完毕，发送同步指令...\n");
      syncErrors[projectInfo.project.toLowerCase()] = [];
      slave.emit("syncAll", projectInfo.project.toLowerCase());
      return watchDir(projectInfo);
    });
  });
};

if (!appConfig.watch) {
  return;
}

_ref = appConfig.watch;
for (_i = 0, _len = _ref.length; _i < _len; _i++) {
  project = _ref[_i];
  projectInfo = appConfig.getProjectInfo(project);
  if (!projectInfo.exists) {
    return;
  }
  console.log("监视项目" + project + ",文件夹" + projectInfo.root + projectInfo.dir);
  watcherDict[projectInfo.dir] = [];
  watchDir(projectInfo);
}
