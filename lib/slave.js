// Generated by CoffeeScript 1.6.3
var appConfig, client, fs, helper, isConnect, project, projectInfo, reconnct, slave, sync, watchDir, _i, _len, _ref;

sync = require('../lib/sync');

helper = require('./helper');

client = require('socket.io-client');

fs = require('fs');

appConfig = require('/appConfig');

if (!appConfig.masterHost) {
  return;
}

isConnect = false;

slave = client.connect(appConfig.masterHost + ":" + appConfig.port);

console.log("正在连接" + appConfig.masterHost + ":" + appConfig.port);

slave.on('connect', function() {
  console.log("已与服务器建立连接:" + appConfig.masterHost + ":" + appConfig.port);
  isConnect = true;
  global.slave = slave;
  slave.emit('master', appConfig.watch || []);
  slave.on('sync', function(project, fn) {
    console.log("接收到同步指令" + project);
    return sync(project, function(data) {
      fn(data);
      return console.log(data.result);
    });
  });
  slave.on('message', function(msg) {
    return console.log(msg);
  });
  return slave.on('disconnect', function() {
    isConnect = false;
    return reconnct();
  });
});

slave.on('error', function(data) {
  console.log("无法连接服务器" + appConfig.masterHost + ":" + appConfig.port);
  return reconnct();
});

reconnct = function() {
  if (isConnect) {
    return;
  }
  slave.socket.reconnect();
  return setTimeout(reconnct, 30000);
};

watchDir = function(projectInfo) {
  var watcher;
  return watcher = fs.watch(projectInfo.root + projectInfo.dir, function(event, filename) {
    if (filename === ".git") {
      return;
    }
    console.log("监视到 " + filename + " 变动,事件 " + event + "，" + appConfig.watchInterval + " 分钟后将同步...");
    watcher.close();
    return setTimeout((function() {
      var cmd;
      console.log("\n监视服务器,文件上传中，请等待...\n");
      cmd = helper.exec('push', project);
      return cmd.on('close', function(code) {
        if (code !== 0) {
          return console.log('自动同步失败，请检查原因\n ');
        }
        console.log("文件自动上传完毕，发送同步指令...\n");
        slave.emit("syncAll", project.toLowerCase());
        return watchDir(projectInfo);
      });
    }), 1000 * 60 * appConfig.watchInterval);
  });
};

if (!appConfig.watch) {
  return;
}

_ref = appConfig.watch;
for (_i = 0, _len = _ref.length; _i < _len; _i++) {
  project = _ref[_i];
  projectInfo = appConfig.getProjectInfo(project);
  console.log("监视项目" + project + ",文件夹" + projectInfo.root + projectInfo.dir);
  if (!projectInfo.exists) {
    return;
  }
  watchDir(projectInfo);
}
