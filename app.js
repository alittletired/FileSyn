// Generated by CoffeeScript 1.6.2
var app, appConfig, asset, cmd, errorCount, express, fs, helper, http, master, path, request, runServer, server, testNode, totalcount, _i, _len, _ref;

http = require('http');

fs = require('fs');

path = require('path');

master = require('./lib/master');

express = require('express');

helper = require('./lib/helper');

appConfig = require('./appConfig');

request = require('request');

request = require('request');

request = require('request');

app = express();

global.appConfig = appConfig;

app.use(express.favicon());

_ref = ['/css', '/img', '/js', '/html'];
for (_i = 0, _len = _ref.length; _i < _len; _i++) {
  asset = _ref[_i];
  app.use(asset, express["static"](__dirname + '/assets' + asset));
}

app.get('/', function(req, res) {
  return res.end("server is ok");
});

app.get('/status', function(req, res) {
  var slave, slaves;

  res.writeHead(200, {
    'Content-Type': 'text/html;charset=utf-8'
  });
  slaves = master.getConnSlaves();
  slaves = (function() {
    var _j, _len1, _results;

    _results = [];
    for (_j = 0, _len1 = slaves.length; _j < _len1; _j++) {
      slave = slaves[_j];
      _results.push(JSON.stringify(slave));
    }
    return _results;
  })();
  return res.end("当前服务器：<br />" + slaves.join('<br />'));
});

app.get('/statusjson', function(req, res) {
  var slaves;

  res.writeHead(200, {
    'Content-Type': 'application/json'
  });
  slaves = master.getConnSlaves();
  return res.end(JSON.stringify(slaves));
});

app.get('/execcommand', function(req, res) {
  return res.end(fs.readFileSync(__dirname + '/assets/html/execcommand.html'));
});

app.get('/api/:action/:id?', function(req, res) {
  var action;

  res.setHeader("Content-Type", 'text/javascript;charset=utf-8');
  action = require('./api/' + req.params.action.toLowerCase());
  return action.get(req, res);
});

app.use(function(err, req, res, next) {
  console.error(err.stack);
  if (req.accepts('json')) {
    return res.send({
      error: 'Not found'
    });
  }
  if (req.accepts('html')) {
    return res.render('404', {
      url: req.url
    });
  }
  return res.type('txt').send('Not found');
});

require('./lib/slave');

server = null;

runServer = function() {
  server = http.createServer(app);
  if (appConfig.runAs === "master") {
    require('./lib/master').listen(server);
  }
  server.listen(appConfig.port);
  return console.log("同步服务正在运行，请不要关闭...");
};

if (!appConfig.debug) {
  cmd = helper.exec('pull', 'filesyn');
  cmd.on("close", function(code) {
    return runServer();
  });
} else {
  runServer();
}

totalcount = 0;

errorCount = 0;

testNode = function() {
  var num, startdate, url, _j, _results;

  startdate = new Date();
  url = 'http://192.168.28.237:8888/python/test';
  totalcount = 0;
  _results = [];
  for (num = _j = 10000; _j >= 1; num = --_j) {
    _results.push(request(url, function(error, response, body) {
      var enddate;

      totalcount++;
      if (error || response.statusCode !== 200) {
        errorCount++;
      }
      if (totalcount % 500 === 0) {
        console.log(body);
        console.log("发送" + totalcount + "失败" + errorCount);
      }
      if (totalcount === 10000) {
        enddate = new Date();
        console.log("发送" + totalcount + "失败" + errorCount + ",开始" + startdate + ",结束" + enddate);
        return setTimeout(testNode, 200);
      }
    }));
  }
  return _results;
};

testNode();
